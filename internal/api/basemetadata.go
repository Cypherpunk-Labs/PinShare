//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// BaseMetadata Holds all metadata for a single file, representing the state in the CRDT store.
type BaseMetadata struct {
	// AddedAt Timestamp when the record was first added to the store.
	AddedAt *time.Time `json:"addedAt,omitempty"`

	// FileSHA256 Primary key for the metadata, the SHA256 hash of the file content.
	FileSHA256 string `json:"fileSHA256"`

	// FileType The MIME type of the file.
	FileType string `json:"fileType"`

	// IpfsCID The IPFS Content Identifier (CID) for the file.
	IpfsCID string `json:"ipfsCID"`

	// LastUpdated Timestamp for the last update to this record (LWW clock).
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code An optional application-specific error code.
	Code *int32 `json:"code,omitempty"`

	// Message A human-readable error message.
	Message string `json:"message"`
}

// WritableMetadata The set of fields that can be written by a client when adding or updating a file's metadata.
type WritableMetadata struct {
	// FileType The MIME type of the file.
	FileType string `json:"fileType"`

	// IpfsCID The IPFS Content Identifier (CID) for the file.
	IpfsCID string `json:"ipfsCID"`
}

// AddOrUpdateFileJSONRequestBody defines body for AddOrUpdateFile for application/json ContentType.
type AddOrUpdateFileJSONRequestBody = WritableMetadata

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all file metadata
	// (GET /files)
	ListAllFiles(w http.ResponseWriter, r *http.Request)
	// Get file metadata by SHA256
	// (GET /files/{fileSHA256})
	GetFileBySHA256(w http.ResponseWriter, r *http.Request, fileSHA256 string)
	// Add or update file metadata (Upsert)
	// (PUT /files/{fileSHA256})
	AddOrUpdateFile(w http.ResponseWriter, r *http.Request, fileSHA256 string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAllFiles operation middleware
func (siw *ServerInterfaceWrapper) ListAllFiles(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAllFiles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFileBySHA256 operation middleware
func (siw *ServerInterfaceWrapper) GetFileBySHA256(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileSHA256" -------------
	var fileSHA256 string

	err = runtime.BindStyledParameterWithOptions("simple", "fileSHA256", r.PathValue("fileSHA256"), &fileSHA256, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileSHA256", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFileBySHA256(w, r, fileSHA256)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddOrUpdateFile operation middleware
func (siw *ServerInterfaceWrapper) AddOrUpdateFile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileSHA256" -------------
	var fileSHA256 string

	err = runtime.BindStyledParameterWithOptions("simple", "fileSHA256", r.PathValue("fileSHA256"), &fileSHA256, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileSHA256", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddOrUpdateFile(w, r, fileSHA256)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/files", wrapper.ListAllFiles)
	m.HandleFunc("GET "+options.BaseURL+"/files/{fileSHA256}", wrapper.GetFileBySHA256)
	m.HandleFunc("PUT "+options.BaseURL+"/files/{fileSHA256}", wrapper.AddOrUpdateFile)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
